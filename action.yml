name: 'Deploy TurboRepo NextJS App to Google App Engine'
description: 'Deploy TurboRepo NextJS App to Google App Engine using a flexible nodejs runtime and yarn.'
author: Playable Inc.
branding:
  color: 'blue'
  icon: 'check-circle'

inputs:
  apps_directory:
    description: |-
      Name of the directory where all of the monorepo apps are stored. You can 
      specify a subdirectory relative to the root of the repository. Leave out
      this input if the apps are stored in the default "apps" directory.
    required: false
    default: 'apps'
  
  target_app:
    description: |-
      Name of the app to deploy. This should be the name of the directory where the
      app is stored. For instance, if the app is stored in "apps/my-app", then this 
      value should be "my-app". This folder should contain the package.json file.
    required: true

  gcloud_project_id:
    description: |-
      ID of the Google Cloud project. If provided, this will configure gcloud to
      use this project ID by default for commands. Individual commands can still
      override the project using the --project flag which takes precedence.
    required: true
  
  gcloud_service_id:
    description: |-
      ID of the Google App Engine Project's service you wish to deploy to. By default,
      this is set to "default". If you are using a custom service, you can specify
      the service ID here. If you intend to use a custom app.yaml file, you should
      specify the service ID in that file instead.
    required: false

  gcloud_key_json:
    description: |-
      Service account key used to authenticate with Google Cloud. This key should
      be a JSON string that is minified to a single line and saved as a secret for
      your repository. See README for instructions on how to generate this JSON
      file from your Google Cloud Console.
    required: true

  should_promote:
    description: |-
      Whether to promote the app and route all traffic to the new version. If set,
      the app will be promoted and all traffic will be routed to the new version.
      This is set to false by default.
    required: false
    default: 'false'
    type: boolean

  gcloudignore_path:
    description: |-
      Path to a custom .gcloudignore file. This file specifies which files to ignore
      when deploying to Google Cloud. If not provided, a .gcloudignore file will be 
      generated.
    required: false

  app_yaml_path:
    description: |-
      Path to a custom app.yaml file. This file specifies the runtime configuration
      for the app. If not provided, a default app.yaml file will be generated.
    required: false

runs:
  using: "composite"
  steps:
    - name: Ensure repo is checked out
      shell: bash
      run: |
        # Complain if actions/checkout is not used
        if [ ! -d ".git" ]; then
          echo "Please ensure your workflow uses actions/checkout@v4 before running this action."
          exit 1
        fi
    
    - name: Ensure yarn install has been run
      shell: bash
      run: |
        if [ ! -d "node_modules" ]; then
          echo "Please ensure you have run 'yarn install' before running this action."
          exit 1
        fi

    - name: Ensure turbo cli has been installed
      shell: bash
      run: |
        if ! command -v turbo &> /dev/null; then
          echo "Please ensure you have ran 'yarn global add turbo' before running this action."
          exit 1
        fi
        
    - name: Authenticate with Google Cloud
      uses: google-github-actions/auth@v2
      with:
        project_id: ${{ inputs.gcloud_project_id }}
        credentials_json: ${{ inputs.gcloud_key_json }}

    - name: Build simplified monorepo
      shell: bash
      run: |
        WORKING_DIRECTORY=${{ inputs.apps_directory }}/${{ inputs.target_app }}

        # Build the specific app that is being targeted
        # NOTE: doing this from GAE may result in unexpected behavior like tsconfigs going haywire
        # over cypress not being able to find the config file, etc
        turbo run build --filter ${{ inputs.target_app }}

        # Extract package name, as this can differ from the directory name and
        # lead to 'package not found' errors when running the prune command
        PACKAGE_NAME=$(jq -r '.name' $WORKING_DIRECTORY/package.json)
        turbo prune --scope=$PACKAGE_NAME
    
    - name: Overwrite package.json
      shell: bash
      run: |
        # Delete all scripts from package.json
        jq 'del(.scripts)' package.json > out/package.json

        # Add a new start script
        jq '.scripts.start = "turbo run start --no-cache"' out/package.json > out/package.json.tmp && mv out/package.json.tmp out/package.json
    
    - name: Prepare .gcloudignore
      shell: bash
      run: |
        bash ${{ github.action_path }}/scripts/prepare_gcloudignore.sh "${{ inputs.gcloudignore_path }}"
    
    - name: Prepare app.yaml
      shell: bash
      run: |
        bash ${{ github.action_path }}/scripts/prepare_app_yaml.sh "${{ inputs.app_yaml_path }}" "${{ inputs.gcloud_service_id }}"

    - name: Set up Google Cloud SDK ☁️
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ inputs.gcloud_project_id }}

    - name: Deploy app to GAE
      id: deploy
      shell: bash
      run: |
        PROMOTE_FLAG=""
        if [[ "${{ inputs.should_promote }}" == "false" ]]; then
          PROMOTE_FLAG="--no-promote"
        fi
        
        cd out || exit
        gcloud app deploy --quiet $PROMOTE_FLAG --version=${GITHUB_REF##*/}
